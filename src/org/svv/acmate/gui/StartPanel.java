/*******************************************************************************
 * Copyright (c) 2016, SVV Lab, University of Luxembourg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * 3. Neither the name of acmate nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *******************************************************************************/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.svv.acmate.gui;

import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.List;
import java.util.Vector;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;

import org.svv.acmate.gui.table.FilterTableModel;
import org.svv.acmate.gui.table.UserTableModel;
import org.svv.acmate.model.TargetAppModel;
import org.svv.acmate.model.config.User;
import org.svv.acmate.model.filters.Filter;

/**
 *
 * @author cdnguyen
 */
public class StartPanel extends javax.swing.JPanel implements IModelListener {
	
	private TargetAppModel model;
	private IMainController controller;
	
	private FilterTableModel filterModel;
	private UserTableModel userModel;

    /**
     * Creates new form StartPanel
     */
    public StartPanel(TargetAppModel model, IMainController controller) {
    	this.model = model;
    	model.registerModelListener(this);
    	
    	this.controller = controller;
    	
        initComponents();
        
        filterModel = new FilterTableModel(model.getFilterModel().getFilter());
        userModel = new UserTableModel(model.getConfigModel().getUser());
        
        tblUsers.setModel(userModel);
        tblFilters.setModel(filterModel);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        jpanelStart = new javax.swing.JPanel();
        lblStartURL = new javax.swing.JLabel();
        txtStartURL = new javax.swing.JTextField();
        lblWorkingDir = new javax.swing.JLabel();
        txtWorkingDir = new javax.swing.JTextField();
        bttnSetWorkingDir = new javax.swing.JButton();
        bttnInitConfig = new javax.swing.JButton();
        bttnGenerateXinput = new javax.swing.JButton();
        bttnGenerateDOT = new javax.swing.JButton();
        lblUserList = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        bttnAddUser = new javax.swing.JButton();
        bttnDeleteUser = new javax.swing.JButton();
        lblFilters = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblFilters = new javax.swing.JTable();
        bttnAddFilter = new javax.swing.JButton();
        bttnDeleteFilter = new javax.swing.JButton();
        bttnApplyFilters = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();

        lblStartURL.setText("Start URL:");

        lblWorkingDir.setText("Working dir:");
        
        txtWorkingDir.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				txtWorkingDirActionPerformed(e);
			}
		});
        
        txtWorkingDir.setDropTarget(new DropTarget(){

			@Override
			public synchronized void drop(DropTargetDropEvent dtde) {
				try {
				dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);
				List<File> droppedFiles = (List<File>) dtde.getTransferable()
						.getTransferData(DataFlavor.javaFileListFlavor);
				if (droppedFiles.size() > 0) {
					txtWorkingDir.setText(droppedFiles.get(0).getAbsolutePath());
					txtWorkingDirActionPerformed(null);
				}

			} catch (Exception ex) {
				ex.printStackTrace();
			}
			}
        	
        });

        bttnSetWorkingDir.setText("Choose");
        bttnSetWorkingDir.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnSetWorkingDirActionPerformed(evt);
            }
        });

        bttnInitConfig.setText("Init/Save Config");
        bttnInitConfig.setToolTipText("");
        bttnInitConfig.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnInitConfigActionPerformed(evt);
            }
        });

        bttnGenerateXinput.setText("Generate XInput");
        bttnGenerateXinput.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnGenerateXinputActionPerformed(evt);
            }
        });
        
        bttnGenerateDOT.setText("Generate SiteMap");
        bttnGenerateDOT.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
//                bttnGenerateDOTActionPerformed(evt);
            }
        });
        bttnGenerateDOT.setEnabled(false);
        

        lblUserList.setText("User list:");

        tblUsers.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblUsers.addMouseListener(new MouseAdapter() {

			@Override
			public void mouseClicked(MouseEvent e) {
				if (e.getClickCount() == 2){
					// double click
					updateUserACtionPerformed();
				}
			}
        	
		});
        jScrollPane1.setViewportView(tblUsers);

        bttnAddUser.setText("Add");
        bttnAddUser.setToolTipText("");
        bttnAddUser.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAddUserActionPerformed(evt);
            }
        });

        bttnDeleteUser.setText("Delete");
        bttnDeleteUser.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnDeleteUserActionPerformed(evt);
            }
        });

        lblFilters.setText("AC Permission Filters");

        tblFilters.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblFilters.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if (e.getClickCount() == 2){
					// double click
					updateFilterACtionPerformed();
				}
				
			}
		});
        
        jScrollPane2.setViewportView(tblFilters);

        bttnAddFilter.setText("Add");
        bttnAddFilter.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAddFilterActionPerformed(evt);
            }
        });

        bttnDeleteFilter.setText("Delete");
        bttnDeleteFilter.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnDeleteFilterActionPerformed(evt);
            }
        });
        
        bttnApplyFilters.setText("Apply");
        bttnApplyFilters.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnApplyFiltersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpanelStartLayout = new javax.swing.GroupLayout(jpanelStart);
        jpanelStart.setLayout(jpanelStartLayout);
        jpanelStartLayout.setHorizontalGroup(
            jpanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelStartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpanelStartLayout.createSequentialGroup()
                        .addGroup(jpanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jpanelStartLayout.createSequentialGroup()
                                .addGroup(jpanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jpanelStartLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(bttnInitConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bttnGenerateDOT, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bttnGenerateXinput))
                                    .addGroup(jpanelStartLayout.createSequentialGroup()
                                        .addComponent(lblWorkingDir)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtWorkingDir)))
                                .addGap(23, 23, 23)
                                .addComponent(bttnSetWorkingDir, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpanelStartLayout.createSequentialGroup()
                                .addComponent(lblStartURL)
                                .addGap(26, 26, 26)
                                .addComponent(txtStartURL)))
                        .addGap(64, 64, 64))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpanelStartLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 717, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bttnDeleteUser, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bttnAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jpanelStartLayout.createSequentialGroup()
                        .addGroup(jpanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpanelStartLayout.createSequentialGroup()
                                .addComponent(lblFilters)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator2))
                            .addGroup(jpanelStartLayout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 717, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jpanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(bttnAddFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bttnDeleteFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bttnApplyFilters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jpanelStartLayout.createSequentialGroup()
                                .addComponent(lblUserList)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 895, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        jpanelStartLayout.setVerticalGroup(
            jpanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelStartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStartURL)
                    .addComponent(txtStartURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblWorkingDir)
                    .addComponent(txtWorkingDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bttnSetWorkingDir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bttnGenerateXinput)
                    .addComponent(bttnInitConfig)
                    .addComponent(bttnGenerateDOT))
                .addGap(39, 39, 39)
                .addGroup(jpanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUserList)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpanelStartLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(bttnDeleteUser))
                    .addComponent(bttnAddUser))
                .addGap(18, 18, 18)
                .addGroup(jpanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpanelStartLayout.createSequentialGroup()
                        .addComponent(lblFilters)
                        .addGap(18, 18, 18)
                        .addGroup(jpanelStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jpanelStartLayout.createSequentialGroup()
                                .addComponent(bttnAddFilter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bttnDeleteFilter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bttnApplyFilters))))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(113, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 969, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jpanelStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 695, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jpanelStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

   
	protected void bttnGenerateDOTActionPerformed(ActionEvent evt) {
    	bttnGenerateDOT.setEnabled(false);
    	controller.handleEvent(IMainController.STARTPANEL_EVENT_EXPORT_DOT);
    	bttnGenerateDOT.setEnabled(true);
	}

	protected void txtWorkingDirActionPerformed(ActionEvent e) {
    	String dir = txtWorkingDir.getText();
    	File f = new File(dir);
    	if (f.exists() && f.isDirectory()){
    		model.setWorkingDir(dir);
    		controller.handleEvent(IMainController.STARTPANEL_EVENT_WORKINGDIR_CHANGED);
    	} else {
    		JOptionPane.showMessageDialog(this, "Entered working dir does not exist!");
    	}
	}

	private void bttnSetWorkingDirActionPerformed(java.awt.event.ActionEvent evt) {
    	jFileChooser.setCurrentDirectory(new java.io.File("."));
    	jFileChooser.setDialogTitle("Choose a working directory");
    	jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    	if (jFileChooser.showDialog(this, "Select") 
    			== JFileChooser.APPROVE_OPTION){
    		String dir = jFileChooser.getSelectedFile().getAbsolutePath();
    		model.setWorkingDir(dir);
    		controller.handleEvent(IMainController.STARTPANEL_EVENT_WORKINGDIR_CHANGED);
    		txtWorkingDir.setText(dir);
    	}
    }
	
	

    private void bttnInitConfigActionPerformed(java.awt.event.ActionEvent evt) {
        bttnInitConfig.setEnabled(false);
        controller.handleEvent(IMainController.STARTPANEL_EVENT_INIT_CONFIG);
        bttnInitConfig.setEnabled(true);
    }

    private void bttnGenerateXinputActionPerformed(java.awt.event.ActionEvent evt) {
    	bttnGenerateXinput.setEnabled(false);
    	controller.handleEvent(IMainController.STARTPANEL_EVENT_EXPORT_XINPUT);
    	bttnGenerateXinput.setEnabled(true);
    }
    
    // with these methods, startpanel acts as the controller for the inner table views
    protected void updateFilterACtionPerformed() {
		int selectedFilterIndex = tblFilters.getSelectedRow();
		if (selectedFilterIndex > -1){
			Filter selectedFilter = filterModel.getRow(selectedFilterIndex);
        	FilterDialog filterDialog = new FilterDialog(selectedFilter);
        	filterDialog.setVisible(true);
        	
        	if (filterDialog.getSelectedOption() == JOptionPane.OK_OPTION){
        		filterModel.fireTableDataChanged();
        	}
        	filterDialog.dispose();
		}
	}

    private void bttnAddFilterActionPerformed(java.awt.event.ActionEvent evt) {
    	FilterDialog filterDialog = new FilterDialog();
    	filterDialog.setVisible(true);
    	
    	if (filterDialog.getSelectedOption() == JOptionPane.OK_OPTION){
    		Filter addedFilter = filterDialog.getFilter();
    		filterModel.addFilter(addedFilter);
    	}
    	filterDialog.dispose();
    }
    
    private void bttnDeleteFilterActionPerformed(java.awt.event.ActionEvent evt) {
    	int selectedFilterIndex = tblFilters.getSelectedRow();
		if (selectedFilterIndex > -1){
			
			if (JOptionPane.showConfirmDialog(this, "Really want to delete the selected filter?",
					"Delete filter", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
				filterModel.deleteFilter(selectedFilterIndex);
        	}
        	
		}
    }
    
    
    private void bttnApplyFiltersActionPerformed(java.awt.event.ActionEvent evt) {                                                 
    	bttnApplyFilters.setEnabled(false);
    	controller.handleEvent(IMainController.STARTPANEL_EVENT_APPLY_FILTERS);
    	bttnApplyFilters.setEnabled(true);
    }    
    
    
    protected void updateUserACtionPerformed() {
		int selectedFilterIndex = tblUsers.getSelectedRow();
		if (selectedFilterIndex > -1){
			User selectedUser = userModel.getRow(selectedFilterIndex);
        	UserDialog userDialog = new UserDialog(selectedUser, getRoles());
        	userDialog.setVisible(true);
        	
        	if (userDialog.getSelectedOption() == JOptionPane.OK_OPTION){
        		userModel.fireTableDataChanged();
        		model.modelChanged(IModelListener.EVENT_USERS_CHANGED);
        	}
        	userDialog.dispose();
		}
	}
    
    private void bttnAddUserActionPerformed(java.awt.event.ActionEvent evt) {
    	UserDialog userDialog = new UserDialog(getRoles());
    	userDialog.setVisible(true);
    	
    	if (userDialog.getSelectedOption() == JOptionPane.OK_OPTION){
    		userModel.addUser(userDialog.getCurrentUser());
    		model.modelChanged(IModelListener.EVENT_USERS_CHANGED);
    	}
    	userDialog.dispose();
    }
    
    /**
     * get all role from existing users
     * @return
     */
    private Vector<String> getRoles(){
    	Vector<String> roles = new Vector<String>();
    	
    	for (User u : model.getConfigModel().getUser()){
    		if (!roles.contains(u.getRole())){
    			roles.add(u.getRole());
    		}
    	}
    	
    	if (roles.size() == 0)
    		roles.add("No Role");
    	
    	return roles;
    }

    private void bttnDeleteUserActionPerformed(java.awt.event.ActionEvent evt) {
    	int selectedFilterIndex = tblUsers.getSelectedRow();
		if (selectedFilterIndex > -1){
			
			if (JOptionPane.showConfirmDialog(this, "Really want to delete the selected user?"
					, "Delete user", JOptionPane.YES_NO_OPTION)
					== JOptionPane.YES_OPTION){
				userModel.deleteUser(selectedFilterIndex);
				model.modelChanged(IModelListener.EVENT_USERS_CHANGED);
        	}
        	
		}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bttnAddFilter;
    private javax.swing.JButton bttnApplyFilters;
    private javax.swing.JButton bttnAddUser;
    private javax.swing.JButton bttnDeleteFilter;
    private javax.swing.JButton bttnDeleteUser;
    private javax.swing.JButton bttnGenerateXinput;
    private javax.swing.JButton bttnGenerateDOT;
    private javax.swing.JButton bttnInitConfig;
    private javax.swing.JButton bttnSetWorkingDir;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JPanel jpanelStart;
    private javax.swing.JLabel lblFilters;
    private javax.swing.JLabel lblStartURL;
    private javax.swing.JLabel lblUserList;
    private javax.swing.JLabel lblWorkingDir;
    private javax.swing.JTable tblFilters;
    private javax.swing.JTable tblUsers;
    private javax.swing.JTextField txtStartURL;
    private javax.swing.JTextField txtWorkingDir;
    // End of variables declaration//GEN-END:variables
	
    
    @Override
	public void startURLChanged() {
		txtStartURL.setText(model.getStartURL());
	}

	@Override
	public void usersChanged() {
	}

	@Override
	public void filterChanged() {
	}

	@Override
	public void configReloaded() {
        userModel = new UserTableModel(model.getConfigModel().getUser());
        tblUsers.setModel(userModel);
	}

	@Override
	public void filterReloaded() {
        filterModel = new FilterTableModel(model.getFilterModel().getFilter());
        tblFilters.setModel(filterModel);
	}

	@Override
	public void testResultUpdated() {
		// TODO Auto-generated method stub
		
	}
}
